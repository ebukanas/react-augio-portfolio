{"ast":null,"code":"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global[\"fast-copy\"] = factory());\n})(this, function () {\n  'use strict';\n\n  var toStringFunction = Function.prototype.toString;\n  var create = Object.create,\n    defineProperty = Object.defineProperty,\n    getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor,\n    getOwnPropertyNames = Object.getOwnPropertyNames,\n    getOwnPropertySymbols = Object.getOwnPropertySymbols,\n    getPrototypeOf$1 = Object.getPrototypeOf;\n  var _a = Object.prototype,\n    hasOwnProperty = _a.hasOwnProperty,\n    propertyIsEnumerable = _a.propertyIsEnumerable;\n  var SYMBOL_PROPERTIES = typeof getOwnPropertySymbols === 'function';\n  var WEAK_MAP = typeof WeakMap === 'function';\n  /**\n   * @function createCache\n   *\n   * @description\n   * get a new cache object to prevent circular references\n   *\n   * @returns the new cache object\n   */\n  var createCache = function () {\n    if (WEAK_MAP) {\n      return function () {\n        return new WeakMap();\n      };\n    }\n    var Cache = /** @class */function () {\n      function Cache() {\n        this._keys = [];\n        this._values = [];\n      }\n      Cache.prototype.has = function (key) {\n        return !!~this._keys.indexOf(key);\n      };\n      Cache.prototype.get = function (key) {\n        return this._values[this._keys.indexOf(key)];\n      };\n      Cache.prototype.set = function (key, value) {\n        this._keys.push(key);\n        this._values.push(value);\n      };\n      return Cache;\n    }();\n    return function () {\n      return new Cache();\n    };\n  }();\n  /**\n   * @function getCleanClone\n   *\n   * @description\n   * get an empty version of the object with the same prototype it has\n   *\n   * @param object the object to build a clean clone from\n   * @param realm the realm the object resides in\n   * @returns the empty cloned object\n   */\n  var getCleanClone = function (object, realm) {\n    var prototype = object.__proto__ || getPrototypeOf$1(object);\n    if (!prototype) {\n      return create(null);\n    }\n    var Constructor = prototype.constructor;\n    if (Constructor === realm.Object) {\n      return prototype === realm.Object.prototype ? {} : create(prototype);\n    }\n    if (~toStringFunction.call(Constructor).indexOf('[native code]')) {\n      try {\n        return new Constructor();\n      } catch (_a) {}\n    }\n    return create(prototype);\n  };\n  /**\n   * @function getObjectCloneLoose\n   *\n   * @description\n   * get a copy of the object based on loose rules, meaning all enumerable keys\n   * and symbols are copied, but property descriptors are not considered\n   *\n   * @param object the object to clone\n   * @param realm the realm the object resides in\n   * @param handleCopy the function that handles copying the object\n   * @returns the copied object\n   */\n  var getObjectCloneLoose = function (object, realm, handleCopy, cache) {\n    var clone = getCleanClone(object, realm);\n    // set in the cache immediately to be able to reuse the object recursively\n    cache.set(object, clone);\n    for (var key in object) {\n      if (hasOwnProperty.call(object, key)) {\n        clone[key] = handleCopy(object[key], cache);\n      }\n    }\n    if (SYMBOL_PROPERTIES) {\n      var symbols = getOwnPropertySymbols(object);\n      for (var index = 0, length_1 = symbols.length, symbol = void 0; index < length_1; ++index) {\n        symbol = symbols[index];\n        if (propertyIsEnumerable.call(object, symbol)) {\n          clone[symbol] = handleCopy(object[symbol], cache);\n        }\n      }\n    }\n    return clone;\n  };\n  /**\n   * @function getObjectCloneStrict\n   *\n   * @description\n   * get a copy of the object based on strict rules, meaning all keys and symbols\n   * are copied based on the original property descriptors\n   *\n   * @param object the object to clone\n   * @param realm the realm the object resides in\n   * @param handleCopy the function that handles copying the object\n   * @returns the copied object\n   */\n  var getObjectCloneStrict = function (object, realm, handleCopy, cache) {\n    var clone = getCleanClone(object, realm);\n    // set in the cache immediately to be able to reuse the object recursively\n    cache.set(object, clone);\n    var properties = SYMBOL_PROPERTIES ? getOwnPropertyNames(object).concat(getOwnPropertySymbols(object)) : getOwnPropertyNames(object);\n    for (var index = 0, length_2 = properties.length, property = void 0, descriptor = void 0; index < length_2; ++index) {\n      property = properties[index];\n      if (property !== 'callee' && property !== 'caller') {\n        descriptor = getOwnPropertyDescriptor(object, property);\n        if (descriptor) {\n          // Only clone the value if actually a value, not a getter / setter.\n          if (!descriptor.get && !descriptor.set) {\n            descriptor.value = handleCopy(object[property], cache);\n          }\n          try {\n            defineProperty(clone, property, descriptor);\n          } catch (error) {\n            // Tee above can fail on node in edge cases, so fall back to the loose assignment.\n            clone[property] = descriptor.value;\n          }\n        } else {\n          // In extra edge cases where the property descriptor cannot be retrived, fall back to\n          // the loose assignment.\n          clone[property] = handleCopy(object[property], cache);\n        }\n      }\n    }\n    return clone;\n  };\n  /**\n   * @function getRegExpFlags\n   *\n   * @description\n   * get the flags to apply to the copied regexp\n   *\n   * @param regExp the regexp to get the flags of\n   * @returns the flags for the regexp\n   */\n  var getRegExpFlags = function (regExp) {\n    var flags = '';\n    if (regExp.global) {\n      flags += 'g';\n    }\n    if (regExp.ignoreCase) {\n      flags += 'i';\n    }\n    if (regExp.multiline) {\n      flags += 'm';\n    }\n    if (regExp.unicode) {\n      flags += 'u';\n    }\n    if (regExp.sticky) {\n      flags += 'y';\n    }\n    return flags;\n  };\n\n  // utils\n  var isArray = Array.isArray;\n  var getPrototypeOf = Object.getPrototypeOf;\n  var GLOBAL_THIS = function () {\n    if (typeof globalThis !== 'undefined') {\n      return globalThis;\n    }\n    if (typeof self !== 'undefined') {\n      return self;\n    }\n    if (typeof window !== 'undefined') {\n      return window;\n    }\n    if (typeof global !== 'undefined') {\n      return global;\n    }\n    if (console && console.error) {\n      console.error('Unable to locate global object, returning \"this\".');\n    }\n    return this;\n  }();\n  /**\n   * @function copy\n   *\n   * @description\n   * copy an value deeply as much as possible\n   *\n   * If `strict` is applied, then all properties (including non-enumerable ones)\n   * are copied with their original property descriptors on both objects and arrays.\n   *\n   * The value is compared to the global constructors in the `realm` provided,\n   * and the native constructor is always used to ensure that extensions of native\n   * objects (allows in ES2015+) are maintained.\n   *\n   * @param value the value to copy\n   * @param [options] the options for copying with\n   * @param [options.isStrict] should the copy be strict\n   * @param [options.realm] the realm (this) value the value is copied from\n   * @returns the copied value\n   */\n  function copy(value, options) {\n    // manually coalesced instead of default parameters for performance\n    var isStrict = !!(options && options.isStrict);\n    var realm = options && options.realm || GLOBAL_THIS;\n    var getObjectClone = isStrict ? getObjectCloneStrict : getObjectCloneLoose;\n    /**\n     * @function handleCopy\n     *\n     * @description\n     * copy the value recursively based on its type\n     *\n     * @param value the value to copy\n     * @returns the copied value\n     */\n    var handleCopy = function (value, cache) {\n      if (!value || typeof value !== 'object') {\n        return value;\n      }\n      if (cache.has(value)) {\n        return cache.get(value);\n      }\n      var prototype = value.__proto__ || getPrototypeOf(value);\n      var Constructor = prototype && prototype.constructor;\n      // plain objects\n      if (!Constructor || Constructor === realm.Object) {\n        return getObjectClone(value, realm, handleCopy, cache);\n      }\n      var clone;\n      // arrays\n      if (isArray(value)) {\n        // if strict, include non-standard properties\n        if (isStrict) {\n          return getObjectCloneStrict(value, realm, handleCopy, cache);\n        }\n        clone = new Constructor();\n        cache.set(value, clone);\n        for (var index = 0, length_1 = value.length; index < length_1; ++index) {\n          clone[index] = handleCopy(value[index], cache);\n        }\n        return clone;\n      }\n      // dates\n      if (value instanceof realm.Date) {\n        return new Constructor(value.getTime());\n      }\n      // regexps\n      if (value instanceof realm.RegExp) {\n        clone = new Constructor(value.source, value.flags || getRegExpFlags(value));\n        clone.lastIndex = value.lastIndex;\n        return clone;\n      }\n      // maps\n      if (realm.Map && value instanceof realm.Map) {\n        clone = new Constructor();\n        cache.set(value, clone);\n        value.forEach(function (value, key) {\n          clone.set(key, handleCopy(value, cache));\n        });\n        return clone;\n      }\n      // sets\n      if (realm.Set && value instanceof realm.Set) {\n        clone = new Constructor();\n        cache.set(value, clone);\n        value.forEach(function (value) {\n          clone.add(handleCopy(value, cache));\n        });\n        return clone;\n      }\n      // blobs\n      if (realm.Blob && value instanceof realm.Blob) {\n        return value.slice(0, value.size, value.type);\n      }\n      // buffers (node-only)\n      if (realm.Buffer && realm.Buffer.isBuffer(value)) {\n        clone = realm.Buffer.allocUnsafe ? realm.Buffer.allocUnsafe(value.length) : new Constructor(value.length);\n        cache.set(value, clone);\n        value.copy(clone);\n        return clone;\n      }\n      // arraybuffers / dataviews\n      if (realm.ArrayBuffer) {\n        // dataviews\n        if (realm.ArrayBuffer.isView(value)) {\n          clone = new Constructor(value.buffer.slice(0));\n          cache.set(value, clone);\n          return clone;\n        }\n        // arraybuffers\n        if (value instanceof realm.ArrayBuffer) {\n          clone = value.slice(0);\n          cache.set(value, clone);\n          return clone;\n        }\n      }\n      // if the value cannot / should not be cloned, don't\n      if (\n      // promise-like\n      typeof value.then === 'function' ||\n      // errors\n      value instanceof Error ||\n      // weakmaps\n      realm.WeakMap && value instanceof realm.WeakMap ||\n      // weaksets\n      realm.WeakSet && value instanceof realm.WeakSet) {\n        return value;\n      }\n      // assume anything left is a custom constructor\n      return getObjectClone(value, realm, handleCopy, cache);\n    };\n    return handleCopy(value, createCache());\n  }\n  // Adding reference to allow usage in CommonJS libraries compiled using TSC, which\n  // expects there to be a default property on the exported value. See\n  // [#37](https://github.com/planttheidea/fast-copy/issues/37) for details.\n  copy.default = copy;\n  /**\n   * @function strictCopy\n   *\n   * @description\n   * copy the value with `strict` option pre-applied\n   *\n   * @param value the value to copy\n   * @param [options] the options for copying with\n   * @param [options.realm] the realm (this) value the value is copied from\n   * @returns the copied value\n   */\n  copy.strict = function strictCopy(value, options) {\n    return copy(value, {\n      isStrict: true,\n      realm: options ? options.realm : void 0\n    });\n  };\n  return copy;\n});","map":{"version":3,"mappings":"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","names":["toStringFunction","Function","prototype","Object","defineProperty","getOwnPropertyDescriptor","getOwnPropertyNames","getOwnPropertySymbols","getPrototypeOf","hasOwnProperty","propertyIsEnumerable","SYMBOL_PROPERTIES","WEAK_MAP","WeakMap","createCache","Cache","key","_keys","indexOf","_values","value","push","getCleanClone","object","realm","__proto__","create","Constructor","constructor","call","getObjectCloneLoose","handleCopy","cache","clone","set","symbols","index","length_1","length","symbol","getObjectCloneStrict","properties","concat","length_2","property","descriptor","get","error","getRegExpFlags","regExp","flags","global","ignoreCase","multiline","unicode","sticky","Array","GLOBAL_THIS","globalThis","self","window","console","copy","options","isStrict","getObjectClone","has","isArray","Date","getTime","RegExp","source","lastIndex","Map","forEach","Set","add","Blob","slice","size","type","Buffer","isBuffer","allocUnsafe","ArrayBuffer","isView","buffer","then","Error","WeakSet","default","strict","strictCopy"],"sources":["/Users/kietasbicas/Documents/learn web dev/react-augio-portfolio/node_modules/src/utils.ts","/Users/kietasbicas/Documents/learn web dev/react-augio-portfolio/node_modules/src/index.ts"],"sourcesContent":["const { toString: toStringFunction } = Function.prototype;\nconst {\n  create,\n  defineProperty,\n  getOwnPropertyDescriptor,\n  getOwnPropertyNames,\n  getOwnPropertySymbols,\n  getPrototypeOf,\n} = Object;\nconst { hasOwnProperty, propertyIsEnumerable } = Object.prototype;\n\nconst SYMBOL_PROPERTIES = typeof getOwnPropertySymbols === 'function';\nconst WEAK_MAP = typeof WeakMap === 'function';\n\n/**\n * @function createCache\n *\n * @description\n * get a new cache object to prevent circular references\n *\n * @returns the new cache object\n */\nexport const createCache = (() => {\n  if (WEAK_MAP) {\n    return (): FastCopy.Cache => new WeakMap();\n  }\n\n  class Cache {\n    _keys: any[] = [];\n    _values: any[] = [];\n\n    has(key: any) {\n      return !!~this._keys.indexOf(key);\n    }\n\n    get(key: any) {\n      return this._values[this._keys.indexOf(key)];\n    }\n\n    set(key: any, value: any) {\n      this._keys.push(key);\n      this._values.push(value);\n    }\n  }\n\n  return (): FastCopy.Cache => new Cache();\n})();\n\n/**\n * @function getCleanClone\n *\n * @description\n * get an empty version of the object with the same prototype it has\n *\n * @param object the object to build a clean clone from\n * @param realm the realm the object resides in\n * @returns the empty cloned object\n */\nexport const getCleanClone = (object: any, realm: FastCopy.Realm): any => {\n  const prototype = object.__proto__ || getPrototypeOf(object);\n\n  if (!prototype) {\n    return create(null);\n  }\n\n  const Constructor = prototype.constructor;\n\n  if (Constructor === realm.Object) {\n    return prototype === realm.Object.prototype ? {} : create(prototype);\n  }\n\n  if (~toStringFunction.call(Constructor).indexOf('[native code]')) {\n    try {\n      return new Constructor();\n    } catch {}\n  }\n\n  return create(prototype);\n};\n\n/**\n * @function getObjectCloneLoose\n *\n * @description\n * get a copy of the object based on loose rules, meaning all enumerable keys\n * and symbols are copied, but property descriptors are not considered\n *\n * @param object the object to clone\n * @param realm the realm the object resides in\n * @param handleCopy the function that handles copying the object\n * @returns the copied object\n */\nexport const getObjectCloneLoose: FastCopy.ObjectCloner = (\n  object: any,\n  realm: FastCopy.Realm,\n  handleCopy: FastCopy.Copier,\n  cache: FastCopy.Cache,\n): any => {\n  const clone: any = getCleanClone(object, realm);\n\n  // set in the cache immediately to be able to reuse the object recursively\n  cache.set(object, clone);\n\n  for (const key in object) {\n    if (hasOwnProperty.call(object, key)) {\n      clone[key] = handleCopy(object[key], cache);\n    }\n  }\n\n  if (SYMBOL_PROPERTIES) {\n    const symbols: symbol[] = getOwnPropertySymbols(object);\n\n    for (\n      let index = 0, length = symbols.length, symbol;\n      index < length;\n      ++index\n    ) {\n      symbol = symbols[index];\n\n      if (propertyIsEnumerable.call(object, symbol)) {\n        clone[symbol] = handleCopy(object[symbol], cache);\n      }\n    }\n  }\n\n  return clone;\n};\n\n/**\n * @function getObjectCloneStrict\n *\n * @description\n * get a copy of the object based on strict rules, meaning all keys and symbols\n * are copied based on the original property descriptors\n *\n * @param object the object to clone\n * @param realm the realm the object resides in\n * @param handleCopy the function that handles copying the object\n * @returns the copied object\n */\nexport const getObjectCloneStrict: FastCopy.ObjectCloner = (\n  object: any,\n  realm: FastCopy.Realm,\n  handleCopy: FastCopy.Copier,\n  cache: FastCopy.Cache,\n): any => {\n  const clone: any = getCleanClone(object, realm);\n\n  // set in the cache immediately to be able to reuse the object recursively\n  cache.set(object, clone);\n\n  const properties: (string | symbol)[] = SYMBOL_PROPERTIES\n    ? getOwnPropertyNames(object).concat(\n        getOwnPropertySymbols(object) as unknown as string[],\n      )\n    : getOwnPropertyNames(object);\n\n  for (\n    let index = 0, length = properties.length, property, descriptor;\n    index < length;\n    ++index\n  ) {\n    property = properties[index];\n\n    if (property !== 'callee' && property !== 'caller') {\n      descriptor = getOwnPropertyDescriptor(object, property);\n\n      if (descriptor) {\n        // Only clone the value if actually a value, not a getter / setter.\n        if (!descriptor.get && !descriptor.set) {\n          descriptor.value = handleCopy(object[property], cache);\n        }\n\n        try {\n          defineProperty(clone, property, descriptor);\n        } catch (error) {\n          // Tee above can fail on node in edge cases, so fall back to the loose assignment.\n          clone[property] = descriptor.value;\n        }\n      } else {\n        // In extra edge cases where the property descriptor cannot be retrived, fall back to\n        // the loose assignment.\n        clone[property] = handleCopy(object[property], cache);\n      }\n    }\n  }\n\n  return clone;\n};\n\n/**\n * @function getRegExpFlags\n *\n * @description\n * get the flags to apply to the copied regexp\n *\n * @param regExp the regexp to get the flags of\n * @returns the flags for the regexp\n */\nexport const getRegExpFlags = (regExp: RegExp): string => {\n  let flags = '';\n\n  if (regExp.global) {\n    flags += 'g';\n  }\n\n  if (regExp.ignoreCase) {\n    flags += 'i';\n  }\n\n  if (regExp.multiline) {\n    flags += 'm';\n  }\n\n  if (regExp.unicode) {\n    flags += 'u';\n  }\n\n  if (regExp.sticky) {\n    flags += 'y';\n  }\n\n  return flags;\n};\n","// utils\nimport {\n  createCache,\n  getObjectCloneLoose,\n  getObjectCloneStrict,\n  getRegExpFlags,\n} from './utils';\n\nconst { isArray } = Array;\nconst { getPrototypeOf } = Object;\n\nconst GLOBAL_THIS: FastCopy.Realm = (function () {\n  if (typeof globalThis !== 'undefined') {\n    return globalThis;\n  }\n\n  if (typeof self !== 'undefined') {\n    return self;\n  }\n\n  if (typeof window !== 'undefined') {\n    return window;\n  }\n\n  if (typeof global !== 'undefined') {\n    return global;\n  }\n\n  if (console && console.error) {\n    console.error('Unable to locate global object, returning \"this\".');\n  }\n\n  return this;\n})();\n\n/**\n * @function copy\n *\n * @description\n * copy an value deeply as much as possible\n *\n * If `strict` is applied, then all properties (including non-enumerable ones)\n * are copied with their original property descriptors on both objects and arrays.\n *\n * The value is compared to the global constructors in the `realm` provided,\n * and the native constructor is always used to ensure that extensions of native\n * objects (allows in ES2015+) are maintained.\n *\n * @param value the value to copy\n * @param [options] the options for copying with\n * @param [options.isStrict] should the copy be strict\n * @param [options.realm] the realm (this) value the value is copied from\n * @returns the copied value\n */\nfunction copy<Value>(value: Value, options?: FastCopy.Options): Value {\n  // manually coalesced instead of default parameters for performance\n  const isStrict = !!(options && options.isStrict);\n  const realm = (options && options.realm) || GLOBAL_THIS;\n  const getObjectClone = isStrict ? getObjectCloneStrict : getObjectCloneLoose;\n\n  /**\n   * @function handleCopy\n   *\n   * @description\n   * copy the value recursively based on its type\n   *\n   * @param value the value to copy\n   * @returns the copied value\n   */\n  const handleCopy: FastCopy.Copier = (\n    value: any,\n    cache: FastCopy.Cache,\n  ): any => {\n    if (!value || typeof value !== 'object') {\n      return value;\n    }\n\n    if (cache.has(value)) {\n      return cache.get(value);\n    }\n\n    const prototype = value.__proto__ || getPrototypeOf(value);\n    const Constructor = prototype && prototype.constructor;\n\n    // plain objects\n    if (!Constructor || Constructor === realm.Object) {\n      return getObjectClone(value, realm, handleCopy, cache);\n    }\n\n    let clone: any;\n\n    // arrays\n    if (isArray(value)) {\n      // if strict, include non-standard properties\n      if (isStrict) {\n        return getObjectCloneStrict(value, realm, handleCopy, cache);\n      }\n\n      clone = new Constructor();\n      cache.set(value, clone);\n\n      for (\n        let index: number = 0, length = value.length;\n        index < length;\n        ++index\n      ) {\n        clone[index] = handleCopy(value[index], cache);\n      }\n\n      return clone;\n    }\n\n    // dates\n    if (value instanceof realm.Date) {\n      return new Constructor(value.getTime());\n    }\n\n    // regexps\n    if (value instanceof realm.RegExp) {\n      clone = new Constructor(\n        value.source,\n        value.flags || getRegExpFlags(value),\n      );\n\n      clone.lastIndex = value.lastIndex;\n\n      return clone;\n    }\n\n    // maps\n    if (realm.Map && value instanceof realm.Map) {\n      clone = new Constructor();\n      cache.set(value, clone);\n\n      value.forEach((value: any, key: any) => {\n        clone.set(key, handleCopy(value, cache));\n      });\n\n      return clone;\n    }\n\n    // sets\n    if (realm.Set && value instanceof realm.Set) {\n      clone = new Constructor();\n      cache.set(value, clone);\n\n      value.forEach((value: any) => {\n        clone.add(handleCopy(value, cache));\n      });\n\n      return clone;\n    }\n\n    // blobs\n    if (realm.Blob && value instanceof realm.Blob) {\n      return value.slice(0, value.size, value.type);\n    }\n\n    // buffers (node-only)\n    if (realm.Buffer && realm.Buffer.isBuffer(value)) {\n      clone = realm.Buffer.allocUnsafe\n        ? realm.Buffer.allocUnsafe(value.length)\n        : new Constructor(value.length);\n\n      cache.set(value, clone);\n      value.copy(clone);\n\n      return clone;\n    }\n\n    // arraybuffers / dataviews\n    if (realm.ArrayBuffer) {\n      // dataviews\n      if (realm.ArrayBuffer.isView(value)) {\n        clone = new Constructor(value.buffer.slice(0));\n        cache.set(value, clone);\n        return clone;\n      }\n\n      // arraybuffers\n      if (value instanceof realm.ArrayBuffer) {\n        clone = value.slice(0);\n        cache.set(value, clone);\n        return clone;\n      }\n    }\n\n    // if the value cannot / should not be cloned, don't\n    if (\n      // promise-like\n      typeof value.then === 'function' ||\n      // errors\n      value instanceof Error ||\n      // weakmaps\n      (realm.WeakMap && value instanceof realm.WeakMap) ||\n      // weaksets\n      (realm.WeakSet && value instanceof realm.WeakSet)\n    ) {\n      return value;\n    }\n\n    // assume anything left is a custom constructor\n    return getObjectClone(value, realm, handleCopy, cache);\n  };\n\n  return handleCopy(value, createCache());\n}\n\n// Adding reference to allow usage in CommonJS libraries compiled using TSC, which\n// expects there to be a default property on the exported value. See\n// [#37](https://github.com/planttheidea/fast-copy/issues/37) for details.\ncopy.default = copy;\n\n/**\n * @function strictCopy\n *\n * @description\n * copy the value with `strict` option pre-applied\n *\n * @param value the value to copy\n * @param [options] the options for copying with\n * @param [options.realm] the realm (this) value the value is copied from\n * @returns the copied value\n */\ncopy.strict = function strictCopy(value: any, options?: FastCopy.Options) {\n  return copy(value, {\n    isStrict: true,\n    realm: options ? options.realm : void 0,\n  });\n};\n\nexport default copy;\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}