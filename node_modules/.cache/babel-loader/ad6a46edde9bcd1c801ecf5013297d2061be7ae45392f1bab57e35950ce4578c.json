{"ast":null,"code":"var _jsxFileName = \"/Users/kietasbicas/Documents/learn web dev/react-augio-portfolio/src/components/home_portfolio.js\",\n  _s = $RefreshSig$();\n// import { useRef } from 'react';\nimport { Works } from '../data';\nimport { useState, useEffect } from 'react';\nimport '../styles/main.css';\nimport '../styles/tailwind.css';\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HomePortfolio = () => {\n  _s();\n  // seperated works into two categories: digital and physical.\n  // two buttons will trigger whichever ones will be displayed \n  const [typeOfWork, setChangeWorkDisplay] = useState('physical');\n  const [selectedButton, setSelectedButton] = useState('physical');\n  const changeToPhysical = () => {\n    setChangeWorkDisplay('physical');\n    setSelectedButton('physical');\n  };\n  const changeToDigital = () => {\n    setChangeWorkDisplay('digital');\n    setSelectedButton('digital');\n  };\n\n  // completely genius function that last grid element to span 2 or 1 based on \n  // whether there is an equal amount of elements or not\n  let workItemCounter = 0;\n  const [gridElementsSpan, setGridElementsSpan] = useState(false);\n  useEffect(() => {\n    console.log('workItemCounter % 2 is ' + workItemCounter % 2);\n    if (workItemCounter % 2) {\n      setGridElementsSpan(true);\n      console.log('running setGridElementSpan(2)');\n    } else {\n      setGridElementsSpan(false);\n      console.log('running setGridElementSpan(1)');\n    }\n  }, [changeToPhysical, changeToDigital, workItemCounter]);\n\n  // this function triggers button style based on which ever one is active\n  const getClassNames = (selectedButton, buttonType) => {\n    if (selectedButton === buttonType) {\n      return 'border-black border-b-2 text-gray-800';\n    } else {\n      return 'border-transparent border-b-0 text-gray-400';\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    id: \"portfolio\",\n    className: \"flex flex-col justify-center\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"h-8 w-screen text-center text-xl mb-4 mt-[40px] font-futura font-bold lg:mb-14 lg:mt-10 md:text-[2em] md:mb-10 md:mt-[20px] \",\n      children: \"PORTFOLIO\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"font-futura flex justify-around mb-6 text-sm  md:text-[1rem] md:justify-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: changeToPhysical,\n        className: `${getClassNames(selectedButton, 'physical')} duration-200 md:px-3 md:pb-1`,\n        children: \"AP\\u010CIUOPIAMI\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: changeToDigital,\n        className: `${getClassNames(selectedButton, 'digital')} duration-200 md:px-3 md:pb-1`,\n        children: \"SKAITMENINIAI\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `h-2/3 w-auto grid grid-rows-2 grid-cols-2 gap-4 mx-4\n            md:mx-20 md:grid-cols-[repeat(auto-fit,_minmax(0,1fr))] md:grid-rows-auto md:h-[60%]\n            lg:h-1/2 lg:grid-rows-1`,\n      children:\n      //typeOfWork is defined in the useState hook above. It returns a string, but [] converts it into an object property\n      Works.filter(workItem => workItem[typeOfWork]).map(workItem => {\n        workItemCounter++;\n        const img = {\n          backgroundImage: 'url(' + workItem.img1 + ')'\n        };\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `${gridElementsSpan ? 'last:col-span-2' : 'last:col-span-1'} md:last:col-span-1 md:row-span-2 cursor-pointer border-2 lg:border-[3px] border-black flex bg-cover bg-top`,\n          style: img,\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"border-t-2 lg:border-t-4 border-black h-8 lg:h-12 w-full font-bold self-end bg-white text-xs  lg:text-base\",\n            children: workItem.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 13\n          }, this)\n        }, workItem.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 17\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n_s(HomePortfolio, \"9PcHrwIdnggpkvchWf3zuMrX0Ks=\");\n_c = HomePortfolio;\nexport default HomePortfolio;\nvar _c;\n$RefreshReg$(_c, \"HomePortfolio\");","map":{"version":3,"names":["Works","useState","useEffect","React","HomePortfolio","typeOfWork","setChangeWorkDisplay","selectedButton","setSelectedButton","changeToPhysical","changeToDigital","workItemCounter","gridElementsSpan","setGridElementsSpan","console","log","getClassNames","buttonType","filter","workItem","map","img","backgroundImage","img1","title","id"],"sources":["/Users/kietasbicas/Documents/learn web dev/react-augio-portfolio/src/components/home_portfolio.js"],"sourcesContent":["// import { useRef } from 'react';\nimport { Works } from '../data';\nimport { useState, useEffect } from 'react';\n\nimport '../styles/main.css';\nimport '../styles/tailwind.css';\nimport React from 'react';\n\n\n\nconst HomePortfolio = () => {\n\n    // seperated works into two categories: digital and physical.\n    // two buttons will trigger whichever ones will be displayed \n    const [typeOfWork, setChangeWorkDisplay] = useState('physical');\n    const [selectedButton, setSelectedButton] = useState('physical');\n    const changeToPhysical = () => {\n        setChangeWorkDisplay('physical');\n        setSelectedButton('physical');\n    }\n    const changeToDigital = () => {\n        setChangeWorkDisplay('digital');\n        setSelectedButton('digital');\n    }\n\n    // completely genius function that last grid element to span 2 or 1 based on \n    // whether there is an equal amount of elements or not\n    let workItemCounter = 0;\n    const [gridElementsSpan, setGridElementsSpan] = useState(false);\n    useEffect(() => {\n        console.log('workItemCounter % 2 is ' + workItemCounter % 2);\n        if (workItemCounter % 2) {\n            setGridElementsSpan(true);\n            console.log('running setGridElementSpan(2)');\n        } else {\n            setGridElementsSpan(false);\n            console.log('running setGridElementSpan(1)');\n        }\n    }, [changeToPhysical, changeToDigital, workItemCounter]);\n\n    // this function triggers button style based on which ever one is active\n    const getClassNames = (selectedButton, buttonType) => {\n        if (selectedButton === buttonType) {\n          return 'border-black border-b-2 text-gray-800';\n        } else {\n          return 'border-transparent border-b-0 text-gray-400';\n        }\n      };\n\n      \n\n  return (\n    <section \n    id=\"portfolio\" \n    className=\"flex flex-col justify-center\">\n        <h1 className=\"h-8 w-screen text-center text-xl mb-4 mt-[40px] font-futura font-bold\n        lg:mb-14 lg:mt-10\n        md:text-[2em] md:mb-10 md:mt-[20px]\n        \">PORTFOLIO</h1>\n        <div className='font-futura flex justify-around mb-6 text-sm \n        md:text-[1rem] md:justify-center'>\n            <button \n            onClick={changeToPhysical} \n            className={`${getClassNames(selectedButton, 'physical')} duration-200 md:px-3 md:pb-1`}>APÄŒIUOPIAMI</button>\n\n            <button \n            onClick={changeToDigital} \n            className={`${getClassNames(selectedButton, 'digital')} duration-200 md:px-3 md:pb-1`}>SKAITMENINIAI</button>\n        </div>\n            <div className={`h-2/3 w-auto grid grid-rows-2 grid-cols-2 gap-4 mx-4\n            md:mx-20 md:grid-cols-[repeat(auto-fit,_minmax(0,1fr))] md:grid-rows-auto md:h-[60%]\n            lg:h-1/2 lg:grid-rows-1`}>\n\n            {\n            //typeOfWork is defined in the useState hook above. It returns a string, but [] converts it into an object property\n            Works\n            .filter((workItem) => workItem[typeOfWork])\n            .map((workItem) => {\n                workItemCounter++;\n            const img = {\n                backgroundImage: 'url(' + workItem.img1 + ')',\n            };\n\n            return (\n                <div \n                key={workItem.id} \n                className={`${gridElementsSpan ? 'last:col-span-2' : 'last:col-span-1'} md:last:col-span-1 md:row-span-2 cursor-pointer border-2 lg:border-[3px] border-black flex bg-cover bg-top`}\n                style={img}>\n            <button className=\"border-t-2 lg:border-t-4 border-black h-8 lg:h-12 w-full font-bold self-end bg-white text-xs \n            lg:text-base\">{workItem.title}</button>\n                </div>\n                \n            );\n        })}\n\n            </div>\n    </section>\n  );\n  \n}\nexport default HomePortfolio"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}