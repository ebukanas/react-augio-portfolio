{"ast":null,"code":"var _jsxFileName = \"/Users/kietasbicas/Documents/learn web dev/react-augio-portfolio/src/components/workpreview.js\",\n  _s = $RefreshSig$();\nimport { Works } from \"../data\";\nimport { useState } from \"react\";\nimport { useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WorkPreview = () => {\n  _s();\n  // seperated works into two categories: digital and physical.\n  // two buttons will trigger whichever ones will be displayed \n  const [typeOfWork, setChangeWorkDisplay] = useState('physical');\n  const [selectedButton, setSelectedButton] = useState('physical');\n  const changeToPhysical = () => {\n    setChangeWorkDisplay('physical');\n    setSelectedButton('physical');\n  };\n  const changeToDigital = () => {\n    setChangeWorkDisplay('digital');\n    setSelectedButton('digital');\n  };\n\n  // this function triggers button style based on which ever one is active\n  const getClassNames = (selectedButton, buttonType) => {\n    if (selectedButton === buttonType) {\n      return 'border-black border-b-2 text-gray-800';\n    } else {\n      return 'border-transparent border-b-0 text-gray-400';\n    }\n  };\n  let workItemCounter = 0;\n  const [gridToggler, setGridToggler] = useState(false);\n  useEffect(() => {\n    console.log('workItemCounter % 2 is ' + workItemCounter % 2);\n    if (workItemCounter % 2) {\n      setGridToggler(true);\n      console.log('running setGridElementSpan(2)');\n    } else {\n      setGridToggler(false);\n      console.log('running setGridElementSpan(1)');\n    }\n  }, [changeToPhysical, changeToDigital, workItemCounter]);\n  const navigate = useNavigate();\n  const navigateToWorkPage = url => {\n    console.log('test');\n    navigate(`/workpage/${url}`);\n  };\n\n  // if 3 = 1 rows / 3 cols\n  // if 4 = 2 rows / 2 cols\n  // if 5 = 3 rows / 2 cols /last span 3\n  // if 6 = 2 rows / 3 cols \n\n  // set use state to number values. \n  // use if (or switch) statements for every numOfItems up to 8\n  // ( example: if workItemCounter === 3 then set setGridToggler(3))\n\n  // then in the div classname set ${gridToggler ? 'grid-rows-1' : 'grid-rows-2'} \n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"h-auto w-full pb-6 pt-6\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"font-futura text-center\",\n      children: \"KITI DARBAI\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex justify-evenly font-futura text-[0.7em] mt-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: changeToPhysical,\n        className: `${getClassNames(selectedButton, 'physical')} duration-200 md:px-3 md:pb-1`,\n        children: \"AP\\u010CIUOPIAMI\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: changeToDigital,\n        className: `${getClassNames(selectedButton, 'digital')} duration-200 md:px-3 md:pb-1`,\n        children: \"SKAITMENINIAI\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `${gridToggler ? 'grid-rows-1' : 'grid-rows-2'} ${gridToggler ? 'col-span-1' : 'col-span-2'} grid grid-cols-3 w-full justify-evenly mt-6 gap-2 h-[200px]`,\n      children: Works.filter(workItem => workItem[typeOfWork]).map(workItem => {\n        workItemCounter++;\n        const img = {\n          backgroundImage: 'url(' + workItem.img1 + ')'\n        };\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          onClick: () => navigateToWorkPage(workItem.url),\n          style: img,\n          className: `h-30 bg-cover bg-center border-black border-[2px] cursor-pointer`\n        }, workItem.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 17\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n_s(WorkPreview, \"0qpkkZpPaCsn6PamFKcCq8L0r5Y=\", false, function () {\n  return [useNavigate];\n});\n_c = WorkPreview;\nexport default WorkPreview;\nvar _c;\n$RefreshReg$(_c, \"WorkPreview\");","map":{"version":3,"names":["Works","useState","useEffect","useNavigate","WorkPreview","typeOfWork","setChangeWorkDisplay","selectedButton","setSelectedButton","changeToPhysical","changeToDigital","getClassNames","buttonType","workItemCounter","gridToggler","setGridToggler","console","log","navigate","navigateToWorkPage","url","filter","workItem","map","img","backgroundImage","img1","id"],"sources":["/Users/kietasbicas/Documents/learn web dev/react-augio-portfolio/src/components/workpreview.js"],"sourcesContent":["import { Works } from \"../data\"\nimport { useState } from \"react\";\nimport { useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\n\nconst WorkPreview = () => {\n\n// seperated works into two categories: digital and physical.\n// two buttons will trigger whichever ones will be displayed \nconst [typeOfWork, setChangeWorkDisplay] = useState('physical');\nconst [selectedButton, setSelectedButton] = useState('physical');\nconst changeToPhysical = () => {\n    setChangeWorkDisplay('physical');\n    setSelectedButton('physical');\n}\nconst changeToDigital = () => {\n    setChangeWorkDisplay('digital');\n    setSelectedButton('digital');\n}\n\n// this function triggers button style based on which ever one is active\nconst getClassNames = (selectedButton, buttonType) => {\n    if (selectedButton === buttonType) {\n        return 'border-black border-b-2 text-gray-800';\n    } else {\n        return 'border-transparent border-b-0 text-gray-400';\n    }\n};\n\nlet workItemCounter = 0;\n\nconst [gridToggler, setGridToggler] = useState(false);\nuseEffect(() => {\n    console.log('workItemCounter % 2 is ' + workItemCounter % 2);\n    if (workItemCounter % 2) {\n        setGridToggler(true);\n        console.log('running setGridElementSpan(2)');\n    } else {\n        setGridToggler(false);\n        console.log('running setGridElementSpan(1)');\n    }\n}, [changeToPhysical, changeToDigital, workItemCounter]);\n\n\nconst navigate = useNavigate();\nconst navigateToWorkPage = (url) => {\n    console.log('test');\n  navigate(`/workpage/${url}`);\n};\n\n// if 3 = 1 rows / 3 cols\n// if 4 = 2 rows / 2 cols\n// if 5 = 3 rows / 2 cols /last span 3\n// if 6 = 2 rows / 3 cols \n\n// set use state to number values. \n// use if (or switch) statements for every numOfItems up to 8\n// ( example: if workItemCounter === 3 then set setGridToggler(3))\n\n// then in the div classname set ${gridToggler ? 'grid-rows-1' : 'grid-rows-2'} \n\n\n  return (\n    <div className=\"h-auto w-full pb-6 pt-6\">\n    <h1 className=\"font-futura text-center\">KITI DARBAI</h1>\n        <div className=\"flex justify-evenly font-futura text-[0.7em] mt-4\">\n            <button \n            onClick={changeToPhysical} \n            className={`${getClassNames(selectedButton, 'physical')} duration-200 md:px-3 md:pb-1`}>APÄŒIUOPIAMI</button>\n\n            <button \n            onClick={changeToDigital} \n            className={`${getClassNames(selectedButton, 'digital')} duration-200 md:px-3 md:pb-1`}>SKAITMENINIAI</button>\n        </div>\n\n{/* try to fix thissssss gridToggler*/}\n        <div className={`${gridToggler ? 'grid-rows-1' : 'grid-rows-2'} ${gridToggler ? 'col-span-1' : 'col-span-2'} grid grid-cols-3 w-full justify-evenly mt-6 gap-2 h-[200px]`}>\n        {Works.\n        filter((workItem) => workItem[typeOfWork])\n        .map((workItem) => {\n        workItemCounter++;\n        const img = {\n            backgroundImage: 'url(' + workItem.img1 + ')',\n        };\n            return (\n                <div \n                key={workItem.id}\n                onClick={() => navigateToWorkPage(workItem.url)}\n                style={img} \n                className={`h-30 bg-cover bg-center border-black border-[2px] cursor-pointer`}>\n                </div>\n            )\n        })}\n        </div>\n    </div>\n  )\n}\nexport default WorkPreview"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}